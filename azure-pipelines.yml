# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- none

resources:
- repo: self

variables:
  - group: deploymentOptions
  # Container registry service connection established during pipeline creation
  - name: dockerRegistryServiceConnection
    value: '708ea539-d5df-4542-8b16-d21ffe79f013'
  - name: dockerfilePath
    value: '**/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  - name: resourceGroup
    value: 'ftadevops-rg'
  - name: clusterName
    value: 'aksdevops-tf'
  - name:  region
    value: 'southeeast asia'
  - name: isNewCluster
    value: true
  # deployWith options 'arm','tarraform','ansible'
  - name: deployWith
    value: 'tarraform'
  - name: user
    value: 'wviriya'
  # Agent VM image name
  - name: vmImageName
    value: 'ubuntu-latest'

pool:
  vmImage: $(vmImageName)

stages:
- stage: Build
  displayName: Build
  jobs:  
  - job: BuildDockerImage
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: PublishPipelineArtifact@1
      inputs:
        path: $(System.DefaultWorkingDirectory)
        artifact: artifacts

    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'

  # Deploy with ARM
  - job: DeployWihtARM
    displayName: Deploy to Azure wiht ARM
    condition: eq(variables.deployWith,'arm')
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'Victor-DevOps'
        subscriptionId: '$(subscriptionId)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroup)
        location: 'Southeast Asia'
        templateLocation: 'Linked artifact'
        csmFile: '$(System.DefaultWorkingDirectory)/arm/template.json'
        csmParametersFile: '$(System.DefaultWorkingDirectory)/arm/parameters.json'
        overrideParameters: '-clusterName $(clusterName) -doRoleAssignment $(isNewCluster)'
        deploymentMode: 'Incremental'

  # Deploy with Terraform
  - job: DeployWihtTerraform
    displayName: Deploy to Azure wiht Terraform
    condition: eq(variables.deployWith,'terraform')
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      condition: eq(variables.deployWith,'Terraform')
      displayName: 'Replace tokens in **/*.tf'
      inputs:
        rootDirectory: '$(System.DefaultWorkingDirectory)/_FabMed-Web/drop/terraform'
        targetFiles: '**/*.tf'
        escapeType: none
        tokenPrefix: '__'
        tokenSuffix: '__'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform : azurerm init'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/_FabMed-Web/drop/terraform'
        backendServiceArm: 'Victor-DevOps'
        backendAzureRmResourceGroupName: 'terraform_rg'
        backendAzureRmStorageAccountName: wviriyatfstate
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: terraform.tfstate

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform : azurerm plan'
      inputs:
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/_FabMed-Web/drop/terraform'
        commandOptions: '-lock=false'
        environmentServiceNameAzureRM: 'Victor-DevOps'
        backendServiceArm: 'Victor-DevOps'
        backendAzureRmResourceGroupName: 'terraform_rg'
        backendAzureRmStorageAccountName: wviriyatfstate
        backendAzureRmContainerName: k8stf
        backendAzureRmKey: '$(k8s-tf)'
        continueOnError: true
    
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
      displayName: 'Terraform : azurerm apply'
      inputs:
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/_FabMed-Web/drop/terraform'
        commandOptions: '-auto-approve -lock=false'
        environmentServiceNameAzureRM: 'Victor-DevOps'
        backendServiceArm: 'Victor-DevOps'
        backendAzureRmResourceGroupName: 'terraform_rg'
        backendAzureRmStorageAccountName: wviriyatfstate
        backendAzureRmContainerName: k8stf
        backendAzureRmKey: '$(k8s-tf)'
      
  # Deploy with Ansible
  - job: DeployWihtAnsible
    displayName: Deploy to Azure wiht Ansible
    condition: eq(variables.deployWith,'ansible')
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'Replace tokens in **/*.yml'
      inputs:
        rootDirectory: '$(System.DefaultWorkingDirectory)/_FabMed-Web/drop/ansible'
        targetFiles: '**/*.yml'
        tokenPrefix: '__'
        tokenSuffix: '__'
    
    - task: ms-vscs-rm.vss-services-ansible.ansible-task.Ansible@0
      displayName: 'Run playbook'
      inputs:
        ansibleInterface: remoteMachine
        connectionOverSsh: ansiblevm
        playbookRootRemoteMachine: '$(System.DefaultWorkingDirectory)/_FabMed-Web/drop/ansible'
        playbookPathLinkedArtifactOnRemoteMachine: 'azure_create_aks.yml'
        playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/_FabMed-Web/drop/ansible/azure_create_aks.yml'
        inventoriesRemoteMachine: hostList
        inventoryHostListRemoteMachine: wviriyaansible.australiaeast.cloudapp.azure.com
        args: '-vvv'
        failOnStdErr: false
          
  # Configure New Cluster      
  - job: ConfigCluster
    displayName: Config new AKS cluster
    condition: eq(variables.isNewCluster,true)
    steps:      
    - task: KubectlInstaller@0
      inputs:
        kubectlVersion: 'latest'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'Victor-DevOps'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/scripts/cluster_config.sh'
        arguments: '$(subscriptionId) $(resourceGroup) $(clusterName)'
    
- stage: test
  displayName: Deploy to test
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy stage
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Victor-DevOps'
              azureResourceGroup: '$(resourceGroup)'
              kubernetesCluster: '$(clusterName)'
              namespace: '$(Environment.Name)'
              command: 'install'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/artifacts/charts/web'
              releaseName: 'web-$(Environment.Name)-$(Build.BuildNumber)'
          

- stage: uat
  displayName: Deploy to uat
  dependsOn: test
  jobs:
  - deployment: Deploy
    displayName: Deploy stage
    environment: 'uat'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Victor-DevOps'
              azureResourceGroup: '$(resourceGroup)'
              kubernetesCluster: '$(clusterName)'
              namespace: '$(Environment.Name)'
              command: 'install'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/artifacts/charts/web'
              releaseName: 'web-$(Environment.Name)-$(Build.BuildNumber)'

- stage: prod
  displayName: Deploy to prod
  dependsOn: uat
  jobs:
  - deployment: Deploy
    displayName: Deploy stage
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Victor-DevOps'
              azureResourceGroup: '$(resourceGroup)'
              kubernetesCluster: '$(clusterName)'
              namespace: '$(Environment.Name)'
              command: 'install'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/artifacts/charts/web'
              releaseName: 'web-$(Environment.Name)-$(Build.BuildNumber)'
